{"version":3,"file":"setup.test.js","sourceRoot":"","sources":["../../../src/__test__/setup.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+DAAyD;AACzD,kCAA8B;AAC9B,sDAA+B;AAC/B,wDAA+B;AAE/B,IAAI,MAAyB,CAAA;AAE7B,SAAS,CAAE;;;;oBACD,qBAAM,yCAAiB,CAAC,MAAM,EAAE,EAAA;;gBAAzC,MAAM,GAAG,SAAgC,CAAA;gBACnC,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAA;gBAC3B,qBAAM,kBAAQ,CAAC,OAAO,CAAE,GAAG,CAAE,EAAA;;gBAA7B,SAA6B,CAAA;;;;KAC7B,CAAE,CAAA;AAEH,UAAU,CAAE;;;;;gBACX,IAAI,CAAC,aAAa,EAAE,CAAA;gBAEA,qBAAM,kBAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,EAAE,EAAA;;gBAAxD,WAAW,GAAG,SAA0C;sBAEzB,EAAX,2BAAW;;;qBAAX,CAAA,yBAAW,CAAA;gBAAzB,UAAU;gBACrB,qBAAM,UAAU,CAAC,UAAU,CAAE,EAAE,CAAE,EAAA;;gBAAjC,SAAiC,CAAA;;;gBADR,IAAW,CAAA;;;;;KAGrC,CAAE,CAAA;AAEH,QAAQ,CAAE;;;oBACT,qBAAM,MAAM,CAAC,IAAI,CAAE;oBAClB,SAAS,EAAE,IAAI;oBACf,KAAK,EAAE,IAAI;iBACX,CAAE,EAAA;;gBAHH,SAGG,CAAA;gBAEH,qBAAM,kBAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,EAAA;;gBAAjC,SAAiC,CAAA;;;;KACjC,CAAE,CAAA;AAEH,EAAE,CAAE,sCAAsC,EAAE;;;;;oBAC3C,qBAAM,IAAA,mBAAO,EAAE,WAAG,CAAE,CAAC,GAAG,CAAE,YAAY,CAAE,CAAC,MAAM,CAAE,GAAG,CAAE,EAAA;;gBAAtD,SAAsD,CAAA;gBAErC,qBAAM,IAAA,mBAAO,EAAE,WAAG,CAAE,CAAC,GAAG,CAAE,YAAY,CAAE,CAAC,MAAM,CAAE,GAAG,CAAE,EAAA;;gBAAjE,QAAQ,GAAG,SAAsD;gBAEvE,MAAM,CAAE,MAAA,QAAQ,CAAC,IAAI,0CAAE,OAAO,CAAE,CAAC,OAAO,CAAE,MAAM,CAAE,CAAA;;;;KAClD,CAAE,CAAA;AAEH,EAAE,CAAE,2CAA2C,EAAE;;;;;oBAC/B,qBAAM,IAAA,mBAAO,EAAE,WAAG,CAAE,CAAC,GAAG,CAAE,aAAa,CAAE,CAAC,MAAM,CAAE,GAAG,CAAE,EAAA;;gBAAlE,QAAQ,GAAG,SAAuD;gBAExE,MAAM,CAAE,MAAA,QAAQ,CAAC,IAAI,0CAAE,KAAK,CAAE,CAAC,OAAO,CAAE,oBAAoB,CAAE,CAAA;;;;KAC9D,CAAE,CAAA","sourcesContent":["import { MongoMemoryServer } from 'mongodb-memory-server'\r\nimport { app } from '../index'\r\nimport mongoose from 'mongoose'\r\nimport request from 'supertest'\r\n\r\nlet mongod: MongoMemoryServer\r\n\r\nbeforeAll( async () => {\r\n\tmongod = await MongoMemoryServer.create()\r\n\tconst uri = mongod.getUri()\r\n\tawait mongoose.connect( uri )\r\n} )\r\n\r\nbeforeEach( async () => {\r\n\tjest.clearAllMocks()\r\n\r\n\tconst collections = await mongoose.connection.db.collections()\r\n\r\n\tfor ( const collection of collections ) {\r\n\t\tawait collection.deleteMany( {} )\r\n\t}\r\n} )\r\n\r\nafterAll( async () => {\r\n\tawait mongod.stop( {\r\n\t\tdoCleanup: true,\r\n\t\tforce: true,\r\n\t} )\r\n\r\n\tawait mongoose.connection.close()\r\n} )\r\n\r\nit( 'should return a 200 on a GET request', async () => {\r\n\tawait request( app ).get( '/test/ping' ).expect( 200 )\r\n\r\n\tconst response = await request( app ).get( '/test/ping' ).expect( 200 )\r\n\r\n\texpect( response.body?.message ).toEqual( 'pong' )\r\n} )\r\n\r\nit( 'should return a 500 internal server error', async () => {\r\n\tconst response = await request( app ).get( '/test/error' ).expect( 500 )\r\n\r\n\texpect( response.body?.error ).toEqual( 'Intended Exception' )\r\n} )\r\n"]}