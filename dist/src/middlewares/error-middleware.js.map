{"version":3,"file":"error-middleware.js","sourceRoot":"","sources":["../../../src/middlewares/error-middleware.ts"],"names":[],"mappings":";;AAGA,SAAwB,eAAe,CACtC,KAMC,EACD,IAAa,EACb,GAAa;AACb,6DAA6D;AAC7D,KAAmB;;IAEnB,IAAI,MAAM,GAAG,KAAK,CAAC,UAAU,IAAI,GAAG,CAAA;IACpC,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAA;IAE3B,YAAY;IACZ,OAAO,CAAC,KAAK,CAAE,KAAK,CAAE,CAAC;IAEvB,2CAA2C;IAC3C,IAAK,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,KAAK,CAAC,QAAQ,KAAK,SAAS,EAAG,CAAC;QAC5D,IAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAE,KAAK,CAAC,QAAQ,CAAE,CAAC,CAAC,CAAC,CAAA;QAC5C,OAAO,GAAG,UAAG,GAAG,CAAC,MAAM,CAAE,CAAC,CAAE,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,KAAK,CAAE,CAAC,CAAE,gBAAM,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,uBAAoB,CAAA;QACxG,MAAM,GAAG,GAAG,CAAA;IACb,CAAC;IAED,IAAK,KAAK,CAAC,IAAI,KAAK,WAAW,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAG,CAAC;QAC/D,MAAM,GAAG,GAAG,CAAA;QACZ,OAAO,GAAG,qCAAqC,CAAA;IAChD,CAAC;IAED,iCAAiC;IACjC,IAAK,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAG,CAAC;QAC/C,MAAM,GAAG,GAAG,CAAA;QACZ,OAAO,GAAG,MAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAiB,mCAAI,KAAK,CAAC,OAAO,CAAA;IAC/D,CAAC;IAED,GAAG,CAAC,MAAM,CAAE,MAAM,CAAE,CAAC,IAAI,CAAE;QAC1B,MAAM,QAAA;QACN,OAAO,EAAE,OAAO;KAChB,CAAE,CAAA;AACJ,CAAC;AAzCD,kCAyCC","sourcesContent":["import HTTPException from '../utils/exception'\r\nimport { Request, Response, NextFunction } from 'express'\r\n\r\nexport default function errorMiddleware(\r\n\terror: HTTPException & {\r\n\t\tcode?: number | string\r\n\t\tkeyPattern?: { [key: string]: number }\r\n\t\tkeyValue?: { [key: string]: unknown }\r\n\t\tkind?: string\r\n\t\terrors?: { [key: string]: unknown }[]\r\n\t},\r\n\t_req: Request,\r\n\tres: Response,\r\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\t_next: NextFunction,\r\n): void {\r\n\tlet status = error.statusCode || 500\r\n\tlet message = error.message\r\n\r\n\t// Log error\r\n\tconsole.error( error );\r\n\r\n\t// document uniqueness and duplicates error\r\n\tif ( error.code === 11000 && error.keyValue !== undefined ) {\r\n\t\tconst key = Object.keys( error.keyValue )[0]\r\n\t\tmessage = `${key.charAt( 0 ).toUpperCase() + key.slice( 1 )}: '${error.keyValue[key]}' is already taken`\r\n\t\tstatus = 400\r\n\t}\r\n\r\n\tif ( error.name === 'CastError' && error.kind === 'ObjectId' ) {\r\n\t\tstatus = 400\r\n\t\tmessage = `Provided Id is an invalid ObjectId.`\r\n\t}\r\n\r\n\t// Custom error, from zod for now\r\n\tif ( error.errors && error.errors.length > 0 ) {\r\n\t\tstatus = 400\r\n\t\tmessage = ( error.errors[0].error as string ) ?? error.message\r\n\t}\r\n\r\n\tres.status( status ).send( {\r\n\t\tstatus,\r\n\t\tmessage: message,\r\n\t} )\r\n}\r\n"]}