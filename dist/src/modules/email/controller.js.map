{"version":3,"file":"controller.js","sourceRoot":"","sources":["../../../../src/modules/email/controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { HTTPRequest } from '../../adapters/express-callback'\r\nimport { StatusCodes } from 'http-status-codes'\r\nimport { db } from '../../db'\r\nimport { ACCOUNT } from '../../interfaces'\r\nimport { createAccessToken } from '../../services/token/token'\r\nimport { Document } from 'mongoose'\r\nimport { generateOTP, storeOTP, getOTPFromCacheStore } from '../../services/otp/send-otp'\r\nimport cron from 'node-cron'\r\nimport { otpCacheStore } from '../../cache-store/client'\r\nimport { sendMail } from '../../services/email/email'\r\nimport { html } from '../../constants/html'\r\n\r\nexport function sendEmail() {\r\n\tasync function expireOTPCache( email: string ) {\r\n\t\ttry {\r\n\t\t\totpCacheStore.expire( email );\r\n\t\t} catch ( error ) {\r\n\t\t\tconsole.error( 'Error expiring OTP from cache:', error );\r\n\t\t}\r\n\t}\r\n\r\n\treturn async function ( request: HTTPRequest<object, object, { email: string }> ) {\r\n\t\ttry {\r\n\t\t\tconst otp = generateOTP();\r\n\r\n\t\t\tawait storeOTP( request.query.email, otp.toString() );\r\n\r\n\t\t\tcron.schedule( '*/2 * * * *', () => {\r\n\t\t\t\texpireOTPCache( request.query.email );\r\n\t\t\t} );\r\n\r\n\t\t\tawait sendMail(\r\n\t\t\t\trequest.query.email, html( otp.toString() ), \"Email Verification\", otp.toString()\r\n\t\t\t);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstatusCode: StatusCodes.OK,\r\n\t\t\t\tbody: {\r\n\t\t\t\t\tdata: null,\r\n\t\t\t\t\tmessage: 'Email sent successfully!',\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t} catch ( error ) {\r\n\t\t\treturn {\r\n\t\t\t\tstatusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n\t\t\t\tbody: {\r\n\t\t\t\t\tdata: error,\r\n\t\t\t\t\tmessage: 'Failed to send email',\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n}\r\n\r\n\r\nexport function verifyEmail() {\r\n\treturn async function ( request: HTTPRequest<object, { email: string; otp: string; }, object> ) {\r\n\t\tconst { email, otp } = request.body\r\n\t\ttry {\r\n\r\n\t\t\tconst cacheStoreOTP = await getOTPFromCacheStore( email )\r\n\r\n\t\t\tif ( !cacheStoreOTP ) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatusCode: StatusCodes.BAD_REQUEST,\r\n\t\t\t\t\tbody: {\r\n\t\t\t\t\t\tdata: null,\r\n\t\t\t\t\t\tmessage: 'Wrong or Expired OTP. Try resending the OTP request',\r\n\t\t\t\t\t},\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( cacheStoreOTP === otp ) {\r\n\t\t\t\tlet admin\r\n\r\n\t\t\t\tadmin = await db.admins.findOne( { email } )\r\n\r\n\t\t\t\tif ( !admin ) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tstatusCode: StatusCodes.NOT_FOUND,\r\n\t\t\t\t\t\tbody: {\r\n\t\t\t\t\t\t\tdata: null,\r\n\t\t\t\t\t\t\tmessage: 'No such user with given email. Please try registering again after 5 mins',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tadmin.isEmailVerified = true\r\n\t\t\t\tadmin = await admin.save()\r\n\r\n\t\t\t\tconst accessToken = createAccessToken( admin as Document & ACCOUNT )\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatusCode: StatusCodes.OK,\r\n\t\t\t\t\tbody: {\r\n\t\t\t\t\t\tdata: admin,\r\n\t\t\t\t\t\taccessToken,\r\n\t\t\t\t\t\tmessage: 'OTP has been Verified',\r\n\t\t\t\t\t},\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tstatusCode: StatusCodes.BAD_REQUEST,\r\n\t\t\t\tbody: {\r\n\t\t\t\t\tdata: null,\r\n\t\t\t\t\tmessage: 'Wrong OTP',\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t} catch ( error ) {\r\n\t\t\tconsole.log( \"error: \", error )\r\n\t\t\treturn {\r\n\t\t\t\tstatusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n\t\t\t\tbody: {\r\n\t\t\t\t\tdata: null,\r\n\t\t\t\t\tmessage: 'FAILED TO VERIFY OTP',\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"]}