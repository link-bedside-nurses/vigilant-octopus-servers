{"version":3,"file":"controller.js","sourceRoot":"","sources":["../../../../src/modules/caregivers/controller.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\r\nimport { HTTPRequest } from \"../../adapters/express-callback\";\r\nimport { StatusCodes } from \"http-status-codes\";\r\nimport { db } from \"../../db\";\r\nimport mongoose from \"mongoose\";\r\nimport { Caregiver } from \"../../db/schemas/Caregiver\";\r\nimport { Exception } from \"../../utils\";\r\n\r\nexport function getAllCaregivers() {\r\n    return async function (\r\n        request: HTTPRequest<object, object, { latLng: string }>,\r\n    ) {\r\n        const { latLng } = request.query;\r\n\r\n        let caregivers = [];\r\n\r\n        if (latLng) {\r\n            const latitude = latLng?.split(\",\")[0];\r\n            const longitude = latLng?.split(\",\")[1];\r\n\r\n            if (!latitude || !longitude) {\r\n                throw new Error(\r\n                    \"Missing either latitude or longitude on the 'latLng' query key\",\r\n                );\r\n            }\r\n            // prettier-ignore\r\n            const pipeline: mongoose.PipelineStage[] = [\r\n                {\r\n                    '$geoNear': {\r\n                        'near': {\r\n                            'type': \"Point\",\r\n                            'coordinates': [parseFloat(longitude), parseFloat(latitude)],\r\n                        },\r\n                        'distanceField': \"distance\",\r\n                    },\r\n                },\r\n                {\r\n                    '$sort': {\r\n                        'distance': 1,\r\n                    },\r\n                },\r\n            ];\r\n\r\n            caregivers = await db.appointments.aggregate(pipeline);\r\n        } else {\r\n            caregivers = await db.caregivers\r\n                .find({})\r\n                .sort({ createdAt: \"desc\" });\r\n        }\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: caregivers,\r\n                message: \"caregivers Retrieved\",\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nexport function getCaregiver() {\r\n    return async function (\r\n        request: HTTPRequest<{\r\n            id: string;\r\n        }>,\r\n    ) {\r\n        const caregiver = await db.caregivers.findById(request.params.id);\r\n\r\n        if (!caregiver) {\r\n            return {\r\n                statusCode: StatusCodes.NOT_FOUND,\r\n                body: {\r\n                    message: \"No caregiver Found\",\r\n                    data: null,\r\n                },\r\n            };\r\n        }\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: caregiver,\r\n                message: \"caregiver Retrieved\",\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nexport function deleteCaregiver() {\r\n    return async function (\r\n        request: HTTPRequest<{\r\n            id: string;\r\n        }>,\r\n    ) {\r\n        const caregiver = await db.caregivers.findByIdAndDelete(\r\n            request.params.id,\r\n        );\r\n\r\n        if (!caregiver) {\r\n            return {\r\n                statusCode: StatusCodes.NOT_FOUND,\r\n                body: {\r\n                    message: \"No caregiver Found\",\r\n                    data: null,\r\n                },\r\n            };\r\n        }\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: caregiver,\r\n                message: \"caregiver deleted\",\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\ninterface UpdateBody {\r\n    phone: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    nin: string;\r\n    medicalLicenseNumber: string;\r\n    description: string;\r\n    placeOfReception: string;\r\n    speciality: string[];\r\n    languages: string[];\r\n    affiliations: string[];\r\n    experience: 0;\r\n    servicesOffered: string[];\r\n    imgUrl: string;\r\n}\r\n\r\nexport function updateCaregiver() {\r\n    return async function (\r\n        request: HTTPRequest<\r\n            {\r\n                id: string;\r\n            },\r\n            UpdateBody\r\n        >,\r\n    ) {\r\n        const caregiver = await db.caregivers.findByIdAndUpdate(\r\n            request.params.id,\r\n            { ...request.body },\r\n            { new: true },\r\n        );\r\n\r\n        if (!caregiver) {\r\n            return {\r\n                statusCode: StatusCodes.NOT_FOUND,\r\n                body: {\r\n                    message: \"No caregiver Found\",\r\n                    data: null,\r\n                },\r\n            };\r\n        }\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: caregiver,\r\n                message: \"caregiver updated\",\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nexport function deactivateCaregiver() {\r\n    return async function (\r\n        request: HTTPRequest<\r\n            {\r\n                id: string;\r\n            },\r\n            UpdateBody\r\n        >,\r\n    ) {\r\n        const caregiver = await db.caregivers.findByIdAndUpdate(\r\n            request.params.id,\r\n            { $set: { isDeactivated: true } },\r\n            { new: true },\r\n        );\r\n\r\n        if (!caregiver) {\r\n            return {\r\n                statusCode: StatusCodes.NOT_FOUND,\r\n                body: {\r\n                    message: \"No caregiver Found\",\r\n                    data: null,\r\n                },\r\n            };\r\n        }\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: caregiver,\r\n                message: \"Account successfully deactivated\",\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nconst locationBasedSearch = async (params: {\r\n    location: { lat: number; lng: number };\r\n    distance?: number; // in kilometres\r\n    criteria?: string;\r\n}) => {\r\n    console.log(params);\r\n    const { location: coords, distance: radiusInKm = 8.8 } = params;\r\n\r\n    // validating search criteria query option\r\n\r\n    // get location coords\r\n    const searchRadius = radiusInKm / 1.60934 / 3963.2;\r\n    const longitude = coords.lng;\r\n    const latitude = coords.lat;\r\n\r\n    // query filter ...\r\n    let queryFilter: mongoose.FilterQuery<Caregiver> = {};\r\n\r\n    queryFilter = {\r\n        ...queryFilter,\r\n        location: {\r\n            $geoWithin: {\r\n                $centerSphere: [[longitude, latitude], searchRadius],\r\n            },\r\n        },\r\n    };\r\n\r\n    // search through the database\r\n    const resultingCaregivers = await db.caregivers.find({\r\n        ...queryFilter,\r\n    });\r\n\r\n    return resultingCaregivers;\r\n};\r\n\r\nexport function searchCaregiversByLocation() {\r\n    return async function (\r\n        req: HTTPRequest<\r\n            object,\r\n            object,\r\n            {\r\n                lat: string;\r\n                lng: string;\r\n                distance: string;\r\n            }\r\n        >,\r\n    ) {\r\n        const queryParams = req.query;\r\n\r\n        console.log(queryParams);\r\n\r\n        if (!queryParams.lat || !queryParams.lng) {\r\n            throw new Exception(`Provide both 'lat' and 'lng' as query params`);\r\n        }\r\n        const latitude: number = parseFloat(queryParams.lat);\r\n        const longitude: number = parseFloat(queryParams.lng);\r\n\r\n        // filters\r\n        let filter: Partial<{ distance: number }> = {};\r\n        if (queryParams.distance) {\r\n            filter = { ...filter, distance: parseFloat(queryParams.distance) };\r\n        }\r\n\r\n        const caregivers = await locationBasedSearch({\r\n            location: { lat: latitude, lng: longitude },\r\n            ...filter,\r\n        });\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: caregivers || [],\r\n                message:\r\n                    caregivers.length > 0\r\n                        ? `Found ${caregivers.length} result(s)`\r\n                        : \"No results found\",\r\n            },\r\n        };\r\n    };\r\n}\r\n"]}