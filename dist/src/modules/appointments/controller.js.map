{"version":3,"file":"controller.js","sourceRoot":"","sources":["../../../../src/modules/appointments/controller.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { HTTPRequest } from \"../../adapters/express-callback\";\r\nimport { StatusCodes } from \"http-status-codes\";\r\nimport { db } from \"../../db\";\r\nimport { mongoose } from \"@typegoose/typegoose\";\r\nimport { Appointment } from \"../../db/schemas/Appointment\";\r\n\r\nexport function getAllAppointments() {\r\n    return async function (_: HTTPRequest<object, object>) {\r\n        const appointments = await db.appointments\r\n            .find({})\r\n            .sort({ createdAt: \"desc\" })\r\n            .populate(\"patient\")\r\n            .populate(\"caregiver\");\r\n        console.log(\"all:\", appointments);\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: appointments,\r\n                message:\r\n                    appointments.length === 0\r\n                        ? \"No Appointments Scheduled\"\r\n                        : \"All appointments retrieved\",\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nexport function getCaregiverAppointments() {\r\n    return async function (\r\n        request: HTTPRequest<{ id: string }, object, object>,\r\n    ) {\r\n        const appointments = await db.appointments\r\n            .find({\r\n                caregiver: {\r\n                    _id: request.params.id,\r\n                },\r\n            })\r\n            .populate(\"patient\")\r\n            .populate(\"caregiver\");\r\n\r\n        if (appointments.length > 0) {\r\n            return {\r\n                statusCode: StatusCodes.OK,\r\n                body: {\r\n                    data: appointments,\r\n                    count: appointments.length,\r\n                    message: \"Successfully fetched caregiver Appointments\",\r\n                },\r\n            };\r\n        } else {\r\n            return {\r\n                statusCode: StatusCodes.NOT_FOUND,\r\n                body: {\r\n                    data: null,\r\n                    message: \"No Appointment Found\",\r\n                },\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\nexport function getPatientAppointments() {\r\n    return async function (\r\n        request: HTTPRequest<{ id: string }, object, { status: string }>,\r\n    ) {\r\n        const { status } = request.query;\r\n\r\n        const filters: mongoose.FilterQuery<Appointment> = {\r\n            patient: {\r\n                _id: request.params.id,\r\n            },\r\n            status,\r\n        };\r\n\r\n        const queryOptions: mongoose.QueryOptions<Appointment> = {};\r\n\r\n        const appointments = await db.appointments\r\n            .find(\r\n                {\r\n                    ...filters,\r\n                },\r\n                {},\r\n                { ...queryOptions }, // options like populating can go here\r\n            )\r\n            .populate(\"patient\")\r\n            .populate(\"caregiver\");\r\n\r\n        if (appointments.length > 0) {\r\n            return {\r\n                statusCode: StatusCodes.OK,\r\n                body: {\r\n                    data: appointments,\r\n                    count: appointments.length,\r\n                    message: \"Successfully fetched patient Appointments\",\r\n                },\r\n            };\r\n        } else {\r\n            return {\r\n                statusCode: StatusCodes.NOT_FOUND,\r\n                body: {\r\n                    data: null,\r\n                    message: \"No Appointment Found\",\r\n                },\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\nexport function scheduleAppointment() {\r\n    return async function (\r\n        request: HTTPRequest<\r\n            object,\r\n            {\r\n                title: string;\r\n                caregiverId: string;\r\n                description: string;\r\n                notes: string;\r\n            },\r\n            object\r\n        >,\r\n    ) {\r\n        if (\r\n            !(\r\n                request.body.title &&\r\n                request.body.description &&\r\n                request.body.notes\r\n            )\r\n        ) {\r\n            const missingFields = [];\r\n\r\n            if (!request.body.title) {\r\n                missingFields.push(\"title\");\r\n            }\r\n            if (!request.body.caregiverId) {\r\n                missingFields.push(\"caregiverId\");\r\n            }\r\n\r\n            if (!request.body.description) {\r\n                missingFields.push(\"description\");\r\n            }\r\n\r\n            if (!request.body.notes) {\r\n                missingFields.push(\"notes\");\r\n            }\r\n\r\n            return {\r\n                statusCode: StatusCodes.BAD_REQUEST,\r\n                body: {\r\n                    message: `The following fields are missing: ${missingFields.join(\r\n                        \", \",\r\n                    )}`,\r\n                    data: null,\r\n                },\r\n            };\r\n        }\r\n\r\n        const appointments = await db.appointments\r\n            .create({\r\n                title: request.body.title,\r\n                description: request.body.description,\r\n                notes: request.body.notes,\r\n                patient: request.account?.id,\r\n                caregiver: request.body.caregiverId,\r\n            })\r\n            .then(appointment =>\r\n                appointment\r\n                    .populate(\"patient\")\r\n                    .then(appointment => appointment.populate(\"caregiver\")),\r\n            );\r\n\r\n        await appointments.save();\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: appointments,\r\n                message: \"Appointment Scheduled\",\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nexport function confirmAppointment() {\r\n    return async function (request: HTTPRequest<{ id: string }, object>) {\r\n        const appointment = await db.appointments\r\n            .findById(request.params.id)\r\n            .populate(\"patient\")\r\n            .populate(\"caregiver\");\r\n\r\n        console.log(\"params::id--> \", request.params.id);\r\n\r\n        if (!appointment) {\r\n            return {\r\n                statusCode: StatusCodes.NOT_FOUND,\r\n                body: {\r\n                    data: null,\r\n                    message: \"Could not confirm appointment.\",\r\n                },\r\n            };\r\n        }\r\n\r\n        await appointment.confirmAppointment();\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: appointment,\r\n                message: \"Appointment has been confirmed and initiated\",\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nexport function cancelAppointment() {\r\n    return async function (\r\n        request: HTTPRequest<\r\n            { id: string },\r\n            {\r\n                reason?: string;\r\n            }\r\n        >,\r\n    ) {\r\n        const appointment = await db.appointments\r\n            .findById(request.params.id)\r\n            .populate(\"patient\")\r\n            .populate(\"caregiver\");\r\n\r\n        if (!appointment) {\r\n            return {\r\n                statusCode: StatusCodes.NOT_FOUND,\r\n                body: {\r\n                    data: null,\r\n                    message: \"Could not cancel appointment.\",\r\n                },\r\n            };\r\n        }\r\n\r\n        await appointment.cancelAppointment(request.body.reason);\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: appointment,\r\n                message: \"Successfully cancelled appointment\",\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nexport function getAppointment() {\r\n    return async function (request: HTTPRequest<{ id: string }>) {\r\n        const appointment = await db.appointments\r\n            .findById(request.params.id)\r\n            .populate(\"caregiver\")\r\n            .populate(\"patient\");\r\n\r\n        if (!appointment) {\r\n            return {\r\n                statusCode: StatusCodes.NOT_FOUND,\r\n                body: {\r\n                    data: null,\r\n                    message: \"Could not get appointment.\",\r\n                },\r\n            };\r\n        }\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: appointment,\r\n                message: \"Successfully fetched appointment\",\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nexport function deleteAppointment() {\r\n    return async function (request: HTTPRequest<{ id: string }>) {\r\n        const appointment = await db.appointments.findByIdAndDelete(\r\n            request.params.id,\r\n        );\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: appointment,\r\n                message: \"Successfully deleted appointment\",\r\n            },\r\n        };\r\n    };\r\n}\r\n"]}