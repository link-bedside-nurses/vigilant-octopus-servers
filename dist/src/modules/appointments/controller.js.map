{"version":3,"file":"controller.js","sourceRoot":"","sources":["../../../../src/modules/appointments/controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,uDAAgD;AAChD,+BAA8B;AAE9B,mCAEiB;AAIjB,SAAgB,kBAAkB;IAC9B,OAAO,UAAiB,CAA8B;;;;;4BAC7B,qBAAM,OAAE,CAAC,YAAY;6BACrC,IAAI,CAAE,EAAE,CAAE;6BACV,IAAI,CAAE,EAAE,SAAS,EAAE,MAAM,EAAE,CAAE;6BAC7B,QAAQ,CAAE,SAAS,CAAE;6BACrB,QAAQ,CAAE,WAAW,CAAE,EAAA;;wBAJtB,YAAY,GAAG,SAIO;wBAC5B,OAAO,CAAC,GAAG,CAAE,MAAM,EAAE,YAAY,CAAE,CAAC;wBAEpC,sBAAO;gCACH,UAAU,EAAE,+BAAW,CAAC,EAAE;gCAC1B,IAAI,EAAE;oCACF,IAAI,EAAE,YAAY;oCAClB,OAAO,EACH,YAAY,CAAC,MAAM,KAAK,CAAC;wCACrB,CAAC,CAAC,2BAA2B;wCAC7B,CAAC,CAAC,4BAA4B;oCACtC,KAAK,EAAE,YAAY,CAAC,MAAM;iCAC7B;6BACJ,EAAC;;;;KACL,CAAC;AACN,CAAC;AArBD,gDAqBC;AAED,SAAgB,wBAAwB;IACpC,OAAO,UACH,OAAoD;;;;;4BAE/B,qBAAM,OAAE,CAAC,YAAY;6BACrC,IAAI,CAAE;4BACH,SAAS,EAAE;gCACP,GAAG,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE;6BACzB;yBACJ,CAAE;6BACF,QAAQ,CAAE,SAAS,CAAE;6BACrB,QAAQ,CAAE,WAAW,CAAE,EAAA;;wBAPtB,YAAY,GAAG,SAOO;wBAE5B,IAAK,YAAY,CAAC,MAAM,GAAG,CAAC,EAAG,CAAC;4BAC5B,sBAAO;oCACH,UAAU,EAAE,+BAAW,CAAC,EAAE;oCAC1B,IAAI,EAAE;wCACF,IAAI,EAAE,YAAY;wCAClB,KAAK,EAAE,YAAY,CAAC,MAAM;wCAC1B,OAAO,EAAE,6CAA6C;qCACzD;iCACJ,EAAC;wBACN,CAAC;6BAAM,CAAC;4BACJ,sBAAO;oCACH,UAAU,EAAE,+BAAW,CAAC,SAAS;oCACjC,IAAI,EAAE;wCACF,IAAI,EAAE,IAAI;wCACV,OAAO,EAAE,sBAAsB;qCAClC;iCACJ,EAAC;wBACN,CAAC;;;;;KACJ,CAAC;AACN,CAAC;AAhCD,4DAgCC;AAED,SAAgB,sBAAsB;IAClC,OAAO,UACH,OAAgE;;;;;;wBAExD,MAAM,GAAK,OAAO,CAAC,KAAK,OAAlB,CAAmB;wBAE7B,OAAO,GAAsC;4BAC7C,OAAO,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE;yBACtC,CAAC;wBAEF,IAAK,MAAM,EAAG,CAAC;4BACX,OAAO,yBAAQ,OAAO,KAAE,MAAM,QAAA,GAAE,CAAC;wBACrC,CAAC;wBAEK,QAAQ,GACV;4BACI;gCACI,QAAQ,EAAE;oCACN,SAAS,EAAE,IAAI,kBAAQ,CAAE,OAAO,CAAC,MAAM,CAAC,EAAE,CAAE;iCAC/C;6BACJ,EAAE;gCACC,YAAY,EAAE;oCACV,OAAO,EAAE;wCACL,SAAS,EAAE;4CACP,UAAU,EAAE;gDACR;oDACI,MAAM,EAAE;wDACJ,KAAK,EAAE;4DACH,SAAS,EAAE,SAAS;yDACvB;qDACJ;oDACD,MAAM,EAAE,CAAC;iDACZ,EAAE;oDACC,MAAM,EAAE;wDACJ,KAAK,EAAE;4DACH,SAAS,EAAE,SAAS;yDACvB;qDACJ;oDACD,MAAM,EAAE,CAAC;iDACZ,EAAE;oDACC,MAAM,EAAE;wDACJ,KAAK,EAAE;4DACH,SAAS,EAAE,WAAW;yDACzB;qDACJ;oDACD,MAAM,EAAE,CAAC;iDACZ,EAAE;oDACC,MAAM,EAAE;wDACJ,KAAK,EAAE;4DACH,SAAS,EAAE,WAAW;yDACzB;qDACJ;oDACD,MAAM,EAAE,CAAC;iDACZ;6CACJ;4CACD,SAAS,EAAE,CAAC;yCACf;qCACJ;iCACJ;6BACJ,EAAE;gCACC,OAAO,EAAE;oCACL,WAAW,EAAE,CAAC,CAAC;oCACf,OAAO,EAAE,CAAC;iCACb;6BACJ;yBACJ,CAAA;wBAEL,IAAK,MAAM,EAAG,CAAC;4BACX,QAAQ,CAAC,IAAI,CAAE;gCACX,QAAQ,EAAE;oCACN,QAAQ,EAAE,MAAM;iCACnB;6BACJ,CAAE,CAAC;wBACR,CAAC;wBAEkB,qBAAM,OAAE,CAAC,YAAY,CAAC,SAAS,CAAE,QAAQ,CAAE,EAAA;;wBAA1D,YAAY,GAAG,SAA2C;wBAE/C,qBAAM,OAAE,CAAC,UAAU,CAAC,QAAQ,CAAE,YAAY,EAAE;gCACvD,IAAI,EAAE,WAAW;6BACpB,CAAE,EAAA;;wBAFH,YAAY,GAAG,SAEZ,CAAC;wBAEJ,IAAK,YAAY,CAAC,MAAM,GAAG,CAAC,EAAG,CAAC;4BAC5B,sBAAO;oCACH,UAAU,EAAE,+BAAW,CAAC,EAAE;oCAC1B,IAAI,EAAE;wCACF,IAAI,EAAE,YAAY;wCAClB,KAAK,EAAE,YAAY,CAAC,MAAM;wCAC1B,OAAO,EAAE,2CAA2C;qCACvD;iCACJ,EAAC;wBACN,CAAC;6BAAM,CAAC;4BACJ,sBAAO;oCACH,UAAU,EAAE,+BAAW,CAAC,SAAS;oCACjC,IAAI,EAAE;wCACF,IAAI,EAAE,IAAI;wCACV,OAAO,EAAE,sBAAsB;qCAClC;iCACJ,EAAC;wBACN,CAAC;;;;;KACJ,CAAC;AACN,CAAC;AApGD,wDAoGC;AAED,SAAgB,mBAAmB;IAC/B,OAAO,UACH,OASC;;;;;;;wBAED,IAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAG,CAAC;4BAC/C,aAAa,GAAG,EAAE,CAAC;4BAEzB,IAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAG,CAAC;gCACxB,aAAa,CAAC,IAAI,CAAE,OAAO,CAAE,CAAC;4BAClC,CAAC;4BACD,IAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAG,CAAC;gCAC9B,aAAa,CAAC,IAAI,CAAE,aAAa,CAAE,CAAC;4BACxC,CAAC;4BAED,sBAAO;oCACH,UAAU,EAAE,+BAAW,CAAC,WAAW;oCACnC,IAAI,EAAE;wCACF,OAAO,EAAE,4CAAqC,aAAa,CAAC,IAAI,CAC5D,IAAI,CACP,CAAE;wCACH,IAAI,EAAE,IAAI;qCACb;iCACJ,EAAC;wBACN,CAAC;wBAEoB,qBAAM,OAAE,CAAC,YAAY;iCACrC,MAAM,CAAE;gCACL,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK;gCACzB,WAAW,EAAE,OAAO,CAAC,IAAI,CAAC,WAAW;gCACrC,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK;gCACzB,OAAO,EAAE,MAAA,OAAO,CAAC,OAAO,0CAAE,EAAE;gCAC5B,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,WAAW;6BACtC,CAAE;iCACF,IAAI,CAAE,UAAA,WAAW;gCACd,OAAA,WAAW;qCACN,QAAQ,CAAE,SAAS,CAAE;qCACrB,IAAI,CAAE,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,QAAQ,CAAE,WAAW,CAAE,EAAnC,CAAmC,CAAE;4BAF/D,CAE+D,CAClE,EAAA;;wBAZC,YAAY,GAAG,SAYhB;wBAEL,qBAAM,YAAY,CAAC,IAAI,EAAE,EAAA;;wBAAzB,SAAyB,CAAC;wBAE1B,sBAAO;gCACH,UAAU,EAAE,+BAAW,CAAC,EAAE;gCAC1B,IAAI,EAAE;oCACF,IAAI,EAAE,YAAY;oCAClB,OAAO,EAAE,uBAAuB;iCACnC;6BACJ,EAAC;;;;KACL,CAAC;AACN,CAAC;AA1DD,kDA0DC;AAED,SAAgB,kBAAkB;IAC9B,OAAO,UAAiB,OAA4C;;;;;4BAC5C,qBAAM,OAAE,CAAC,YAAY;6BACpC,QAAQ,CAAE,OAAO,CAAC,MAAM,CAAC,EAAE,CAAE;6BAC7B,QAAQ,CAAE,SAAS,CAAE;6BACrB,QAAQ,CAAE,WAAW,CAAE,EAAA;;wBAHtB,WAAW,GAAG,SAGQ;wBAE5B,OAAO,CAAC,GAAG,CAAE,gBAAgB,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,CAAE,CAAC;wBAEnD,IAAK,CAAC,WAAW,EAAG,CAAC;4BACjB,sBAAO;oCACH,UAAU,EAAE,+BAAW,CAAC,SAAS;oCACjC,IAAI,EAAE;wCACF,IAAI,EAAE,IAAI;wCACV,OAAO,EAAE,gCAAgC;qCAC5C;iCACJ,EAAC;wBACN,CAAC;wBAED,qBAAM,WAAW,CAAC,kBAAkB,EAAE,EAAA;;wBAAtC,SAAsC,CAAC;wBAEvC,sBAAO;gCACH,UAAU,EAAE,+BAAW,CAAC,EAAE;gCAC1B,IAAI,EAAE;oCACF,IAAI,EAAE,WAAW;oCACjB,OAAO,EAAE,8CAA8C;iCAC1D;6BACJ,EAAC;;;;KACL,CAAC;AACN,CAAC;AA7BD,gDA6BC;AAED,SAAgB,iBAAiB;IAC7B,OAAO,UACH,OAKC;;;;;4BAEmB,qBAAM,OAAE,CAAC,YAAY;6BACpC,QAAQ,CAAE,OAAO,CAAC,MAAM,CAAC,EAAE,CAAE;6BAC7B,QAAQ,CAAE,SAAS,CAAE;6BACrB,QAAQ,CAAE,WAAW,CAAE,EAAA;;wBAHtB,WAAW,GAAG,SAGQ;wBAE5B,IAAK,CAAC,WAAW,EAAG,CAAC;4BACjB,sBAAO;oCACH,UAAU,EAAE,+BAAW,CAAC,SAAS;oCACjC,IAAI,EAAE;wCACF,IAAI,EAAE,IAAI;wCACV,OAAO,EAAE,+BAA+B;qCAC3C;iCACJ,EAAC;wBACN,CAAC;wBAED,qBAAM,WAAW,CAAC,iBAAiB,CAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAE,EAAA;;wBAA1D,SAA0D,CAAC;wBAE3D,sBAAO;gCACH,UAAU,EAAE,+BAAW,CAAC,EAAE;gCAC1B,IAAI,EAAE;oCACF,IAAI,EAAE,WAAW;oCACjB,OAAO,EAAE,oCAAoC;iCAChD;6BACJ,EAAC;;;;KACL,CAAC;AACN,CAAC;AAlCD,8CAkCC;AAED,SAAgB,cAAc;IAC1B,OAAO,UAAiB,OAAoC;;;;;4BACpC,qBAAM,OAAE,CAAC,YAAY;6BACpC,QAAQ,CAAE,OAAO,CAAC,MAAM,CAAC,EAAE,CAAE;6BAC7B,QAAQ,CAAE,WAAW,CAAE;6BACvB,QAAQ,CAAE,SAAS,CAAE,EAAA;;wBAHpB,WAAW,GAAG,SAGM;wBAE1B,IAAK,CAAC,WAAW,EAAG,CAAC;4BACjB,sBAAO;oCACH,UAAU,EAAE,+BAAW,CAAC,SAAS;oCACjC,IAAI,EAAE;wCACF,IAAI,EAAE,IAAI;wCACV,OAAO,EAAE,4BAA4B;qCACxC;iCACJ,EAAC;wBACN,CAAC;wBAED,sBAAO;gCACH,UAAU,EAAE,+BAAW,CAAC,EAAE;gCAC1B,IAAI,EAAE;oCACF,IAAI,EAAE,WAAW;oCACjB,OAAO,EAAE,kCAAkC;iCAC9C;6BACJ,EAAC;;;;KACL,CAAC;AACN,CAAC;AAzBD,wCAyBC;AAED,SAAgB,iBAAiB;IAC7B,OAAO,UAAiB,OAAoC;;;;;4BACpC,qBAAM,OAAE,CAAC,YAAY,CAAC,iBAAiB,CACvD,OAAO,CAAC,MAAM,CAAC,EAAE,CACpB,EAAA;;wBAFK,WAAW,GAAG,SAEnB;wBAED,sBAAO;gCACH,UAAU,EAAE,+BAAW,CAAC,EAAE;gCAC1B,IAAI,EAAE;oCACF,IAAI,EAAE,WAAW;oCACjB,OAAO,EAAE,kCAAkC;iCAC9C;6BACJ,EAAC;;;;KACL,CAAC;AACN,CAAC;AAdD,8CAcC","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { HTTPRequest } from \"../../adapters/express-callback\";\r\nimport { StatusCodes } from \"http-status-codes\";\r\nimport { db } from \"../../db\";\r\nimport { mongoose } from \"@typegoose/typegoose\";\r\nimport {\r\n    ObjectId\r\n} from 'mongodb';\r\n\r\nimport { Appointment } from \"../../db/schemas/Appointment\";\r\n\r\nexport function getAllAppointments() {\r\n    return async function ( _: HTTPRequest<object, object> ) {\r\n        const appointments = await db.appointments\r\n            .find( {} )\r\n            .sort( { createdAt: \"desc\" } )\r\n            .populate( \"patient\" )\r\n            .populate( \"caregiver\" );\r\n        console.log( \"all:\", appointments );\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: appointments,\r\n                message:\r\n                    appointments.length === 0\r\n                        ? \"No Appointments Scheduled\"\r\n                        : \"All appointments retrieved\",\r\n                count: appointments.length,\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nexport function getCaregiverAppointments() {\r\n    return async function (\r\n        request: HTTPRequest<{ id: string }, object, object>,\r\n    ) {\r\n        const appointments = await db.appointments\r\n            .find( {\r\n                caregiver: {\r\n                    _id: request.params.id,\r\n                },\r\n            } )\r\n            .populate( \"patient\" )\r\n            .populate( \"caregiver\" );\r\n\r\n        if ( appointments.length > 0 ) {\r\n            return {\r\n                statusCode: StatusCodes.OK,\r\n                body: {\r\n                    data: appointments,\r\n                    count: appointments.length,\r\n                    message: \"Successfully fetched caregiver Appointments\",\r\n                },\r\n            };\r\n        } else {\r\n            return {\r\n                statusCode: StatusCodes.NOT_FOUND,\r\n                body: {\r\n                    data: null,\r\n                    message: \"No Appointment Found\",\r\n                },\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\nexport function getPatientAppointments() {\r\n    return async function (\r\n        request: HTTPRequest<{ id: string }, object, { status: string }>,\r\n    ) {\r\n        const { status } = request.query;\r\n\r\n        let filters: mongoose.FilterQuery<Appointment> = {\r\n            patient: { _id: request.params.id },\r\n        };\r\n\r\n        if ( status ) {\r\n            filters = { ...filters, status };\r\n        }\r\n\r\n        const pipeline: mongoose.PipelineStage[] =\r\n            [\r\n                {\r\n                    '$match': {\r\n                        'patient': new ObjectId( request.params.id )\r\n                    }\r\n                }, {\r\n                    '$addFields': {\r\n                        'order': {\r\n                            '$switch': {\r\n                                'branches': [\r\n                                    {\r\n                                        'case': {\r\n                                            '$eq': [\r\n                                                '$status', 'ongoing'\r\n                                            ]\r\n                                        },\r\n                                        'then': 1\r\n                                    }, {\r\n                                        'case': {\r\n                                            '$eq': [\r\n                                                '$status', 'pending'\r\n                                            ]\r\n                                        },\r\n                                        'then': 2\r\n                                    }, {\r\n                                        'case': {\r\n                                            '$eq': [\r\n                                                '$status', 'cancelled'\r\n                                            ]\r\n                                        },\r\n                                        'then': 3\r\n                                    }, {\r\n                                        'case': {\r\n                                            '$eq': [\r\n                                                '$status', 'completed'\r\n                                            ]\r\n                                        },\r\n                                        'then': 4\r\n                                    }\r\n                                ],\r\n                                'default': 5\r\n                            }\r\n                        }\r\n                    }\r\n                }, {\r\n                    '$sort': {\r\n                        'createdAt': -1,\r\n                        'order': 1\r\n                    }\r\n                }\r\n            ]\r\n\r\n        if ( status ) {\r\n            pipeline.push( {\r\n                '$match': {\r\n                    'status': status,\r\n                },\r\n            } );\r\n        }\r\n\r\n        let appointments = await db.appointments.aggregate( pipeline );\r\n\r\n        appointments = await db.caregivers.populate( appointments, {\r\n            path: \"caregiver\",\r\n        } );\r\n\r\n        if ( appointments.length > 0 ) {\r\n            return {\r\n                statusCode: StatusCodes.OK,\r\n                body: {\r\n                    data: appointments,\r\n                    count: appointments.length,\r\n                    message: \"Successfully fetched patient Appointments\",\r\n                },\r\n            };\r\n        } else {\r\n            return {\r\n                statusCode: StatusCodes.NOT_FOUND,\r\n                body: {\r\n                    data: null,\r\n                    message: \"No Appointment Found\",\r\n                },\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\nexport function scheduleAppointment() {\r\n    return async function (\r\n        request: HTTPRequest<\r\n            object,\r\n            {\r\n                title: string;\r\n                caregiverId: string;\r\n                description: string;\r\n                notes: string;\r\n            },\r\n            object\r\n        >,\r\n    ) {\r\n        if ( !request.body.title && !request.body.caregiverId ) {\r\n            const missingFields = [];\r\n\r\n            if ( !request.body.title ) {\r\n                missingFields.push( \"title\" );\r\n            }\r\n            if ( !request.body.caregiverId ) {\r\n                missingFields.push( \"caregiverId\" );\r\n            }\r\n\r\n            return {\r\n                statusCode: StatusCodes.BAD_REQUEST,\r\n                body: {\r\n                    message: `The following fields are missing: ${missingFields.join(\r\n                        \", \",\r\n                    )}`,\r\n                    data: null,\r\n                },\r\n            };\r\n        }\r\n\r\n        const appointments = await db.appointments\r\n            .create( {\r\n                title: request.body.title,\r\n                description: request.body.description,\r\n                notes: request.body.notes,\r\n                patient: request.account?.id,\r\n                caregiver: request.body.caregiverId,\r\n            } )\r\n            .then( appointment =>\r\n                appointment\r\n                    .populate( \"patient\" )\r\n                    .then( appointment => appointment.populate( \"caregiver\" ) ),\r\n            );\r\n\r\n        await appointments.save();\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: appointments,\r\n                message: \"Appointment Scheduled\",\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nexport function confirmAppointment() {\r\n    return async function ( request: HTTPRequest<{ id: string }, object> ) {\r\n        const appointment = await db.appointments\r\n            .findById( request.params.id )\r\n            .populate( \"patient\" )\r\n            .populate( \"caregiver\" );\r\n\r\n        console.log( \"params::id--> \", request.params.id );\r\n\r\n        if ( !appointment ) {\r\n            return {\r\n                statusCode: StatusCodes.NOT_FOUND,\r\n                body: {\r\n                    data: null,\r\n                    message: \"Could not confirm appointment.\",\r\n                },\r\n            };\r\n        }\r\n\r\n        await appointment.confirmAppointment();\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: appointment,\r\n                message: \"Appointment has been confirmed and initiated\",\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nexport function cancelAppointment() {\r\n    return async function (\r\n        request: HTTPRequest<\r\n            { id: string },\r\n            {\r\n                reason?: string;\r\n            }\r\n        >,\r\n    ) {\r\n        const appointment = await db.appointments\r\n            .findById( request.params.id )\r\n            .populate( \"patient\" )\r\n            .populate( \"caregiver\" );\r\n\r\n        if ( !appointment ) {\r\n            return {\r\n                statusCode: StatusCodes.NOT_FOUND,\r\n                body: {\r\n                    data: null,\r\n                    message: \"Could not cancel appointment.\",\r\n                },\r\n            };\r\n        }\r\n\r\n        await appointment.cancelAppointment( request.body.reason );\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: appointment,\r\n                message: \"Successfully cancelled appointment\",\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nexport function getAppointment() {\r\n    return async function ( request: HTTPRequest<{ id: string }> ) {\r\n        const appointment = await db.appointments\r\n            .findById( request.params.id )\r\n            .populate( \"caregiver\" )\r\n            .populate( \"patient\" );\r\n\r\n        if ( !appointment ) {\r\n            return {\r\n                statusCode: StatusCodes.NOT_FOUND,\r\n                body: {\r\n                    data: null,\r\n                    message: \"Could not get appointment.\",\r\n                },\r\n            };\r\n        }\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: appointment,\r\n                message: \"Successfully fetched appointment\",\r\n            },\r\n        };\r\n    };\r\n}\r\n\r\nexport function deleteAppointment() {\r\n    return async function ( request: HTTPRequest<{ id: string }> ) {\r\n        const appointment = await db.appointments.findByIdAndDelete(\r\n            request.params.id,\r\n        );\r\n\r\n        return {\r\n            statusCode: StatusCodes.OK,\r\n            body: {\r\n                data: appointment,\r\n                message: \"Successfully deleted appointment\",\r\n            },\r\n        };\r\n    };\r\n}\r\n"]}