{"version":3,"file":"controller.js","sourceRoot":"","sources":["../../../../src/modules/sms/controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { HTTPRequest } from '../../adapters/express-callback'\r\nimport { StatusCodes } from 'http-status-codes'\r\nimport { DESIGNATION } from '../../interfaces/designations'\r\nimport { db } from '../../db'\r\nimport { ACCOUNT } from '../../interfaces'\r\nimport { createAccessToken } from '../../services/token/token'\r\nimport { Document } from 'mongoose'\r\nimport sendOTP, { generateOTP, storeOTP, getOTPFromCacheStore } from '../../services/otp/send-otp'\r\nimport cron from 'node-cron'\r\nimport { otpCacheStore } from '../../cache-store/client'\r\n\r\nexport function getOTP() {\r\n\tfunction expireOTPCache( phoneNumber: string ) {\r\n\t\ttry {\r\n\t\t\totpCacheStore.expire( phoneNumber );\r\n\t\t} catch ( error ) {\r\n\t\t\tconsole.error( 'Error expiring OTP from cache:', error );\r\n\t\t}\r\n\t}\r\n\r\n\treturn async function ( request: HTTPRequest<object, object, { toPhone: string }> ) {\r\n\t\ttry {\r\n\t\t\tconst otp = generateOTP();\r\n\r\n\t\t\tawait storeOTP( request.query.toPhone, otp.toString() );\r\n\r\n\t\t\tcron.schedule( '*/2 * * * *', async () => {\r\n\t\t\t\texpireOTPCache( request.query.toPhone );\r\n\t\t\t} );\r\n\r\n\t\t\tconst response = await sendOTP( request.query.toPhone, String( otp ) );\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstatusCode: StatusCodes.OK,\r\n\t\t\t\tbody: {\r\n\t\t\t\t\tdata: JSON.parse( response.config.data ),\r\n\t\t\t\t\tmessage: 'OTP generated successfully!',\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t} catch ( error ) {\r\n\t\t\treturn {\r\n\t\t\t\tstatusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n\t\t\t\tbody: {\r\n\t\t\t\t\tdata: error,\r\n\t\t\t\t\tmessage: 'Failed to generate OTP',\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport function verifyOTP() {\r\n\treturn async function ( request: HTTPRequest<object, { phone: string; otp: string; designation: DESIGNATION }, object> ) {\r\n\t\tconst { phone, otp, designation } = request.body\r\n\t\ttry {\r\n\r\n\t\t\tconst cacheStoreOTP = await getOTPFromCacheStore( phone )\r\n\r\n\t\t\tif ( !cacheStoreOTP ) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatusCode: StatusCodes.BAD_REQUEST,\r\n\t\t\t\t\tbody: {\r\n\t\t\t\t\t\tdata: null,\r\n\t\t\t\t\t\tmessage: 'Wrong or Expired OTP. Try resending the OTP request',\r\n\t\t\t\t\t},\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( cacheStoreOTP === otp ) {\r\n\t\t\t\tlet user\r\n\t\t\t\tif ( designation === DESIGNATION.NURSE ) {\r\n\t\t\t\t\tuser = await db.caregivers.findOne( { phone } )\r\n\t\t\t\t} else if ( designation === DESIGNATION.PATIENT ) {\r\n\t\t\t\t\tuser = await db.patients.findOne( { phone } )\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tstatusCode: StatusCodes.BAD_REQUEST,\r\n\t\t\t\t\t\tbody: {\r\n\t\t\t\t\t\t\tdata: null,\r\n\t\t\t\t\t\t\tmessage: 'Only patients or caregivers can access this route',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( !user ) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tstatusCode: StatusCodes.NOT_FOUND,\r\n\t\t\t\t\t\tbody: {\r\n\t\t\t\t\t\t\tdata: null,\r\n\t\t\t\t\t\t\tmessage: 'No such user with given phone. Please try registering again after 5 mins',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuser.isPhoneVerified = true\r\n\t\t\t\tuser = await user.save()\r\n\r\n\t\t\t\tconst accessToken = createAccessToken( user as Document & ACCOUNT )\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatusCode: StatusCodes.OK,\r\n\t\t\t\t\tbody: {\r\n\t\t\t\t\t\tdata: user,\r\n\t\t\t\t\t\taccessToken,\r\n\t\t\t\t\t\tmessage: 'OTP has been Verified',\r\n\t\t\t\t\t},\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tstatusCode: StatusCodes.BAD_REQUEST,\r\n\t\t\t\tbody: {\r\n\t\t\t\t\tdata: null,\r\n\t\t\t\t\tmessage: 'Wrong OTP',\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t} catch ( error ) {\r\n\t\t\tconsole.log( \"error: \", error )\r\n\t\t\treturn {\r\n\t\t\t\tstatusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n\t\t\t\tbody: {\r\n\t\t\t\t\tdata: null,\r\n\t\t\t\t\tmessage: 'FAILED TO VERIFY OTP',\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"]}