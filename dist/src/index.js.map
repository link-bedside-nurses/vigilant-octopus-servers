{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4BAA0B;AAC1B,uCAAiD;AACjD,yBAAuB;AAEvB,oDAA8B;AAC9B,yCAA8C;AAC9C,8CAA4E;AAC5E,2DAAqC;AACrC,0DAAoC;AACpC,4DAAqC;AAErC,IAAA,gCAAoB,GAAE,CAAC,KAAK,CAAE,UAAE,GAAU,IAAM,OAAA,gBAAM,CAAC,IAAI,CAAE,GAAG,CAAC,OAAO,CAAE,EAA1B,CAA0B,CAAE,CAAC;AAE7E,IAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;AAEtB,IAAA,qBAAU,EAAE,GAAG,CAAE,CAAC;AAElB,GAAG,CAAC,GAAG,CAAE,aAAa,EAAE,KAAK,CAAE,CAAC;AAChC,GAAG,CAAC,GAAG,CAAE,gBAAM,CAAE,CAAC;AAElB,OAAO,CAAC,EAAE,CAAE,oBAAoB,EAAE,UAAE,MAAM,EAAE,OAAO;IAClD,gBAAM,CAAC,KAAK,CAAE,yBAAyB,EAAE;QACxC,OAAO,SAAA;QACP,MAAM,QAAA;KACN,CAAE,CAAC;AACL,CAAC,CAAE,CAAC;AAEJ,OAAO,CAAC,EAAE,CAAE,mBAAmB,EAAE,UAAA,SAAS;IACzC,gBAAM,CAAC,KAAK,CAAE,oBAAoB,EAAE,SAAS,CAAE,CAAC;AACjD,CAAC,CAAE,CAAC;AAEJ,IAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAE,2BAAe,CAAC,OAAO,EAAE,EAAE;;;;gBACrD,gBAAM,CAAC,IAAI,CAAE,uBAAgB,YAAY,SAAG,2BAAe,CAAC,OAAO,EAAE,CAAE,CAAE,CAAC;gBAE1E,qBAAM,IAAA,8BAAiB,GAAE,EAAA;;gBAAzB,SAAyB,CAAC;;;;KAC1B,CAAE,CAAC;AAmBe,qBAAG;AAlBtB,IAAM,eAAe,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;AAE9C,KAAM,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,eAAe,CAAC,MAAM,EAAE,OAAO,EAAE,EAAG,CAAC;IACrE,gBAAgB,CAAE,eAAe,CAAC,OAAO,CAAC,CAAE,CAAC;AAC9C,CAAC;AAED,SAAS,gBAAgB,CAAE,MAAc;IAAzC,iBAUC;IATA,OAAO,CAAC,EAAE,CAAE,MAAM,EAAE;;;wBACnB,qBAAM,IAAA,mCAAsB,GAAE,EAAA;;oBAA9B,SAA8B,CAAC;oBAE/B,MAAM,CAAC,KAAK,CAAE,UAAA,KAAK;wBAClB,gBAAM,CAAC,KAAK,CAAE,KAAK,EAAE,8CAA8C,CAAE,CAAC;oBACvE,CAAC,CAAE,CAAC;oBAEJ,OAAO,CAAC,IAAI,CAAE,CAAC,CAAE,CAAC;;;;SAClB,CAAE,CAAC;AACL,CAAC","sourcesContent":["import \"reflect-metadata\";\nimport { replaceTscAliasPaths } from \"tsc-alias\";\nimport \"dotenv/config\";\n\nimport express from \"express\";\nimport { EnvironmentVars } from \"./constants\";\nimport { connectToDatabase, disconnectFromDatabase } from \"./db/connection\";\nimport router from \"./router/router\";\nimport logger from \"./utils/logger\";\nimport morganBody from \"morgan-body\";\n\nreplaceTscAliasPaths().catch( ( err: Error ) => logger.info( err.message ) );\n\nconst app = express();\n\nmorganBody( app );\n\napp.set( \"trust proxy\", false );\napp.use( router );\n\nprocess.on( \"unhandledRejection\", ( reason, promise ) => {\n\tlogger.error( \"Unhandled Rejection at:\", {\n\t\tpromise,\n\t\treason,\n\t} );\n} );\n\nprocess.on( \"uncaughtException\", exception => {\n\tlogger.error( \"Uncaught Exception\", exception );\n} );\n\nconst server = app.listen( EnvironmentVars.getPort(), async () => {\n\tlogger.info( `Listening at ${\"127.0.0.1:\"}${EnvironmentVars.getPort()}` );\n\n\tawait connectToDatabase();\n} );\nconst shutdownSignals = [\"SIGTERM\", \"SIGINT\"];\n\nfor ( let counter = 0; counter < shutdownSignals.length; counter++ ) {\n\tgracefulShutdown( shutdownSignals[counter] );\n}\n\nfunction gracefulShutdown( signal: string ) {\n\tprocess.on( signal, async () => {\n\t\tawait disconnectFromDatabase();\n\n\t\tserver.close( error => {\n\t\t\tlogger.error( error, \"Failed to close server. Server was not open!\" );\n\t\t} );\n\n\t\tprocess.exit( 0 );\n\t} );\n}\n\nexport { server as app };\n"]}