{"version":3,"file":"token.js","sourceRoot":"","sources":["../../../../src/services/token/token.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8DAA8B;AAC9B,sEAA8C;AAQ9C,SAAgB,iBAAiB,CAAE,IAAmC;IACrE,OAAO,sBAAG,CAAC,IAAI,CACd;QACC,EAAE,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,GAAG;QACb,KAAK,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK;QAClB,KAAK,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK;QAClB,WAAW,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,WAAW;KAC9B,EACD,kBAAO,CAAC,oBAAoB,EAAgB,CAClC,CAAA;AACZ,CAAC;AAVD,8CAUC;AAED,SAAgB,kBAAkB,CAAE,IAAmC;IACtE,OAAO,sBAAG,CAAC,IAAI,CACd;QACC,EAAE,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,GAAG;QACb,WAAW,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,WAAW;KAC9B,EACD,kBAAO,CAAC,qBAAqB,EAAgB,CACnC,CAAA;AACZ,CAAC;AARD,gDAQC;AAED,SAAsB,kBAAkB,CAAE,KAAa;;;YACtD,sBAAO,IAAI,OAAO,CAAE,UAAE,OAAO,EAAE,MAAM;oBACpC,sBAAG,CAAC,MAAM,CAAE,KAAK,EAAE,kBAAO,CAAC,qBAAqB,EAAgB,EAAE,UAAE,GAAG,EAAE,OAAO;wBAC/E,IAAK,GAAG;4BAAG,MAAM,CAAE,GAAG,CAAE,CAAA;wBACxB,OAAO,CAAE,OAAwB,CAAE,CAAA;oBACpC,CAAC,CAAE,CAAA;gBACJ,CAAC,CAAE,EAAA;;;CACH;AAPD,gDAOC","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport EnvVars from '../../constants/env-vars'\r\nimport { Document } from 'mongoose'\r\nimport { ACCOUNT } from '../../interfaces'\r\n\r\nexport interface ITokenPayload extends ACCOUNT {\r\n\tiat: number\r\n}\r\n\r\nexport function createAccessToken( user: ( Document & ACCOUNT ) | null ): string {\r\n\treturn jwt.sign(\r\n\t\t{\r\n\t\t\tid: user?._id,\r\n\t\t\tphone: user?.phone,\r\n\t\t\temail: user?.email,\r\n\t\t\tdesignation: user?.designation,\r\n\t\t},\r\n\t\tEnvVars.getAccessTokenSecret() as jwt.Secret,\r\n\t) as string\r\n}\r\n\r\nexport function createRefreshToken( user: ( Document & ACCOUNT ) | null ): string {\r\n\treturn jwt.sign(\r\n\t\t{\r\n\t\t\tid: user?._id,\r\n\t\t\tdesignation: user?.designation,\r\n\t\t},\r\n\t\tEnvVars.getRefreshTokenSecret() as jwt.Secret,\r\n\t) as string\r\n}\r\n\r\nexport async function verifyRefreshToken( token: string ): Promise<ITokenPayload> {\r\n\treturn new Promise( ( resolve, reject ) => {\r\n\t\tjwt.verify( token, EnvVars.getRefreshTokenSecret() as jwt.Secret, ( err, payload ) => {\r\n\t\t\tif ( err ) reject( err )\r\n\t\t\tresolve( payload as ITokenPayload )\r\n\t\t} )\r\n\t} )\r\n}\r\n"]}